import { supabase } from '../auth/supabase';
import { v4 as uuidv4 } from 'uuid';

interface MagicLinkOptions {
  email: string;
  contentType: 'market_report' | 'provider_intel' | 'territory_insights' | 'cpt_analysis';
  contentId?: string;
  priceTier: 'basic' | 'pro' | 'enterprise';
  price: number;
  expiryHours?: number;
}

interface EmailContentData {
  subject: string;
  body: string;
  recipientName?: string;
  attachments?: Array<{
    filename: string;
    content: string;
    contentType: string;
  }>;
}

export class MagicLinkAuthService {
  // Generate a unique token for magic link
  private static generateToken(): string {
    return uuidv4() + '-' + Date.now();
  }

  // Create a magic link for premium content
  static async createMagicLink(options: MagicLinkOptions): Promise<{ token: string; url: string }> {
    const token = this.generateToken();
    const expiryHours = options.expiryHours || 24;
    const expiresAt = new Date();
    expiresAt.setHours(expiresAt.getHours() + expiryHours);

    const { error } = await supabase
      .from('magic_link_tokens')
      .insert({
        email: options.email,
        token,
        expires_at: expiresAt.toISOString(),
        content_type: options.contentType,
        content_id: options.contentId,
        price_tier: options.priceTier,
        price: options.price
      });

    if (error) throw error;

    // Construct the magic link URL
    const baseUrl = window.location.origin;
    const url = `${baseUrl}/magic-link/${token}`;

    return { token, url };
  }

  // Verify and consume a magic link token
  static async verifyMagicLink(token: string): Promise<{
    valid: boolean;
    email?: string;
    contentType?: string;
    contentId?: string;
    price?: number;
  }> {
    // Check if token exists and is not expired
    const { data, error } = await supabase
      .from('magic_link_tokens')
      .select('*')
      .eq('token', token)
      .eq('used', false)
      .gt('expires_at', new Date().toISOString())
      .single();

    if (error || !data) {
      return { valid: false };
    }

    // Mark token as used
    await supabase
      .from('magic_link_tokens')
      .update({ used: true, used_at: new Date().toISOString() })
      .eq('token', token);

    // Log access
    await supabase
      .from('premium_content_access')
      .insert({
        user_email: data.email,
        content_type: data.content_type,
        content_id: data.content_id,
        access_token: token,
        price_paid: data.price
      });

    return {
      valid: true,
      email: data.email,
      contentType: data.content_type,
      contentId: data.content_id,
      price: data.price
    };
  }

  // Generate mailto link with pre-populated content
  static async generateMailtoLink(
    email: string,
    contentData: EmailContentData
  ): Promise<string> {
    const subject = encodeURIComponent(contentData.subject);
    const body = encodeURIComponent(contentData.body);
    
    // Create mailto link
    let mailto = `mailto:${email}?subject=${subject}&body=${body}`;
    
    return mailto;
  }

  // Create premium content email
  static async createPremiumContentEmail(
    contentType: string,
    contentData: any
  ): Promise<EmailContentData> {
    let subject = '';
    let body = '';

    switch (contentType) {
      case 'market_report':
        subject = `Market Intelligence Report - ${contentData.market} - ${new Date().toLocaleDateString()}`;
        body = this.formatMarketReport(contentData);
        break;
      
      case 'provider_intel':
        subject = `Provider Intelligence Brief - ${contentData.providerName}`;
        body = this.formatProviderIntel(contentData);
        break;
      
      case 'territory_insights':
        subject = `Territory Insights - ${contentData.territory} - Sales Opportunities`;
        body = this.formatTerritoryInsights(contentData);
        break;
      
      case 'cpt_analysis':
        subject = `CPT Code Analysis - ${contentData.procedureCategory}`;
        body = this.formatCPTAnalysis(contentData);
        break;
    }

    return { subject, body };
  }

  // Format market report content
  private static formatMarketReport(data: any): string {
    return `
MARKET INTELLIGENCE REPORT
${data.market} Market Analysis
Generated: ${new Date().toLocaleDateString()}

EXECUTIVE SUMMARY
${data.executiveSummary}

KEY MARKET METRICS
• Market Size: $${data.marketSize}M
• YoY Growth: ${data.growth}%
• Top Procedures: ${data.topProcedures.join(', ')}
• Leading Providers: ${data.leadingProviders}

OPPORTUNITY ANALYSIS
${data.opportunities}

COMPETITIVE LANDSCAPE
${data.competitive}

RECOMMENDATIONS
${data.recommendations}

---
This report was generated by Sphere Market Intelligence
For questions, contact: support@sphere.com
    `;
  }

  // Format provider intelligence
  private static formatProviderIntel(data: any): string {
    return `
PROVIDER INTELLIGENCE BRIEF
Dr. ${data.providerName}
${data.specialty} | ${data.location}

PRACTICE OVERVIEW
• Years in Practice: ${data.yearsInPractice}
• Practice Size: ${data.practiceSize}
• Patient Volume: ${data.patientVolume}/month
• Key Procedures: ${data.keyProcedures.join(', ')}

TECHNOLOGY ADOPTION
${data.techAdoption}

PURCHASING PATTERNS
${data.purchasingPatterns}

ENGAGEMENT STRATEGY
${data.engagementStrategy}

TALKING POINTS
${data.talkingPoints}

---
Intelligence compiled by Sphere Sales Intelligence Platform
    `;
  }

  // Format territory insights
  private static formatTerritoryInsights(data: any): string {
    return `
TERRITORY INSIGHTS REPORT
Territory: ${data.territory}
Period: ${data.period}

TOP OPPORTUNITIES
${data.opportunities.map((opp: any) => `• ${opp.provider} - ${opp.potential} - ${opp.reason}`).join('\n')}

MARKET DYNAMICS
• Territory Value: $${data.territoryValue}M
• Penetration Rate: ${data.penetration}%
• Growth Potential: ${data.growthPotential}%

COMPETITIVE INTEL
${data.competitive}

ACTION ITEMS
${data.actionItems.map((item: any) => `□ ${item}`).join('\n')}

FORECAST
${data.forecast}

---
Generated by Sphere Territory Intelligence
    `;
  }

  // Format CPT analysis
  private static formatCPTAnalysis(data: any): string {
    return `
CPT CODE ANALYSIS
Category: ${data.procedureCategory}
Analysis Date: ${new Date().toLocaleDateString()}

PROCEDURE BREAKDOWN
${data.procedures.map((proc: any) => `
${proc.code} - ${proc.name}
• Average Cost: $${proc.avgCost}
• Insurance Coverage: ${proc.insuranceCoverage}%
• Market Volume: ${proc.volume}/year
• Growth Rate: ${proc.growth}%
`).join('\n')}

REIMBURSEMENT INSIGHTS
${data.reimbursementInsights}

REGIONAL VARIATIONS
${data.regionalVariations}

OPTIMIZATION OPPORTUNITIES
${data.opportunities}

---
CPT Intelligence by Sphere Medical Analytics
    `;
  }

  // Send magic link email
  static async sendMagicLinkEmail(
    email: string,
    magicLinkUrl: string,
    contentType: string,
    price: number
  ): Promise<void> {
    // This would integrate with your email service
    // For now, we'll use Supabase Edge Functions or external email service
    
    // Placeholder for email sending logic
    console.log(`Sending magic link to ${email}: ${magicLinkUrl}`);
  }
}