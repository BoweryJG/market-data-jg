import React, { useState, useEffect, useMemo } from 'react';
import {
  Container,
  Grid,
  Card,
  CardContent,
  Typography,
  CircularProgress,
  Box,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Divider,
  Alert,
  Switch,
  TablePagination,
  Button,
  Chip,
  LinearProgress,
  Tooltip
} from '@mui/material';
import { supabase } from '../../services/supabaseClient';
import { DentalCategory, AestheticCategory, CategoryHierarchy } from '../../types';
import CategoryHierarchyView from './CategoryHierarchyView';
import MarketSizeOverview, { formatMarketSize } from './MarketSizeOverview';
import ProcedureDetailsModal from './ProcedureDetailsModal';
import TableSortLabel from '@mui/material/TableSortLabel';

const Dashboard: React.FC = () => {
  // State for procedures and companies
  const [dentalProcedures, setDentalProcedures] = useState<any[]>([]);
  const [aestheticProcedures, setAestheticProcedures] = useState<any[]>([]);
  const [dentalCompanies, setDentalCompanies] = useState<any[]>([]);
  const [aestheticCompanies, setAestheticCompanies] = useState<any[]>([]);
  
  // State for categories - both legacy and new hierarchical system
  const [dentalCategories, setDentalCategories] = useState<DentalCategory[]>([]);
  const [aestheticCategories, setAestheticCategories] = useState<AestheticCategory[]>([]);
  const [categoryHierarchy, setCategoryHierarchy] = useState<CategoryHierarchy[]>([]);
  
  // Loading and error states
  const [loading, setLoading] = useState<boolean>(true);
  const [companiesLoading, setCompaniesLoading] = useState<boolean>(true);
  const [categoriesLoading, setCategoriesLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  
  // UI state
  const [selectedIndustry, setSelectedIndustry] = useState<'dental' | 'aesthetic'>('dental');
  const [selectedCategory, setSelectedCategory] = useState<number | null>(null);
  const [selectedProcedure, setSelectedProcedure] = useState<any | null>(null);
  const [detailsModalOpen, setDetailsModalOpen] = useState<boolean>(false);
  
  // Sorting state
  const [order, setOrder] = useState<'asc' | 'desc'>('asc');
  const [orderBy, setOrderBy] = useState<string>('name');

  // Pagination state for procedures
  const [dentalPage, setDentalPage] = useState(0);
  const [dentalRowsPerPage, setDentalRowsPerPage] = useState(10);
  const [aestheticPage, setAestheticPage] = useState(0);
  const [aestheticRowsPerPage, setAestheticRowsPerPage] = useState(10);
  
  // Pagination state for companies
  const [dentalCompanyPage, setDentalCompanyPage] = useState(0);
  const [dentalCompanyRowsPerPage, setDentalCompanyRowsPerPage] = useState(10);
  const [aestheticCompanyPage, setAestheticCompanyPage] = useState(0);
  const [aestheticCompanyRowsPerPage, setAestheticCompanyRowsPerPage] = useState(10);
  
  // Pagination state for categories
  const [dentalCategoryPage, setDentalCategoryPage] = useState(0);
  const [dentalCategoryRowsPerPage, setDentalCategoryRowsPerPage] = useState(5);
  const [aestheticCategoryPage, setAestheticCategoryPage] = useState(0);
  const [aestheticCategoryRowsPerPage, setAestheticCategoryRowsPerPage] = useState(5);

  // Map from category names to hierarchy IDs
  // IMPORTANT: Define all useMemo hooks at the component level, not conditionally
  const dentalCategoryMap = useMemo(() => ({
    'Diagnostic': 1,
    'Preventive': 2,
    'Restorative': 3,
    'Cosmetic': 4,
    'Oral Surgery': 5,
    'Endodontic': 6,
    'Periodontic': 7,
    'Prosthodontic': 8,
    'Orthodontic': 9,
    'Implantology': 10,
    'Sleep Dentistry': 2,
    'Pediatric': 2,
    'Adjunctive': 11
  }), []);

  const aestheticCategoryMap = useMemo(() => ({
    'Facial Aesthetic': 12,
    'Injectables': 13,
    'Body': 14,
    'Skin': 15,
    'Hair': 16,
    'Minimally Invasive': 17,
    'Regenerative': 18,
    'Lasers': 19,
    'Combination': 20,
    'Tech-Enhanced': 17,
    'Face': 12,
    'Breast Procedures': 14
  }), []);

  // Fetch categories from the new hierarchical system
  const fetchCategories = async () => {
    setCategoriesLoading(true);
    try {
      // Fetch the complete category hierarchy
      const { data: hierarchyData, error: hierarchyError } = await supabase
        .from('category_hierarchy')
        .select('*')
        .order('display_order', { ascending: true });
      
      if (hierarchyError) throw hierarchyError;
      console.log('Category hierarchy response:', { 
        count: hierarchyData?.length || 0, 
        data: hierarchyData 
      });
      
      setCategoryHierarchy(hierarchyData || []);
      
      // Process the hierarchy data to also populate the legacy category states
      // This ensures backward compatibility with existing code
      const dentalCats = hierarchyData
        ?.filter(cat => cat.applicable_to === 'dental' || cat.applicable_to === 'both')
        .map(cat => ({
          id: cat.id,
          name: cat.name,
          description: cat.description,
          market_size_usd_millions: cat.market_size_usd_millions,
          avg_growth_rate: cat.avg_growth_rate
        })) || [];
      
      const aestheticCats = hierarchyData
        ?.filter(cat => cat.applicable_to === 'aesthetic' || cat.applicable_to === 'both')
        .map(cat => ({
          id: cat.id,
          name: cat.name,
          description: cat.description,
          market_size_usd_millions: cat.market_size_usd_millions,
          avg_growth_rate: cat.avg_growth_rate
        })) || [];
      
      setDentalCategories(dentalCats);
      setAestheticCategories(aestheticCats);
      
    } catch (err: any) {
      console.error('Categories fetch error:', err);
      setError(`Failed to load categories: ${err.message}`);
    } finally {
      setCategoriesLoading(false);
    }
  };

  // Fetch companies
  const fetchCompanies = async () => {
    setCompaniesLoading(true);
    try {
      const { data: dentalData, error: dentalError } = await supabase
        .from('dental_companies')
        .select('*')
        .order('name', { ascending: true });
      if (dentalError) throw dentalError;
      setDentalCompanies(dentalData || []);

      const { data: aestheticData, error: aestheticError } = await supabase
        .from('aesthetic_companies')
        .select('*')
        .order('name', { ascending: true });
      if (aestheticError) throw aestheticError;
      setAestheticCompanies(aestheticData || []);
    } catch (err: any) {
      setError(`Failed to load companies: ${err.message}`);
    } finally {
      setCompaniesLoading(false);
    }
  };

  // Fetch all data on component mount
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError(null);
      try {
        // Try multiple possible table names with detailed error logging
        console.log('Attempting to fetch dental procedures...');
        let dentalResponse = await supabase.from('dental_procedures').select('*');
        if (dentalResponse.error) {
          console.log('Error with dental_procedures table, trying v_dental_procedures view...');
          dentalResponse = await supabase.from('v_dental_procedures').select('*');
          if (dentalResponse.error) {
            console.log('Error with v_dental_procedures view, trying all_procedures with filtering...');
            dentalResponse = await supabase.from('all_procedures').select('*').eq('industry', 'dental');
          }
        }
        
        console.log('Attempting to fetch aesthetic procedures...');
        let aestheticResponse = await supabase.from('aesthetic_procedures').select('*');
        if (aestheticResponse.error) {
          console.log('Error with aesthetic_procedures table, trying v_aesthetic_procedures view...');
          aestheticResponse = await supabase.from('aesthetic_procedures_view').select('*');
          if (aestheticResponse.error) {
            console.log('Error with aesthetic_procedures_view, trying all_procedures with filtering...');
            aestheticResponse = await supabase.from('all_procedures').select('*').eq('industry', 'aesthetic');
          }
        }
        
        if (dentalResponse.error) throw new Error(`Dental procedures: ${dentalResponse.error.message}`);
        if (aestheticResponse.error) throw new Error(`Aesthetic procedures: ${aestheticResponse.error.message}`);
        
        console.log('Dental data (full):', dentalResponse.data);
        console.log('Aesthetic data (full):', aestheticResponse.data);
        console.log('Sample dental raw data (market_size_usd_millions):', dentalResponse.data?.slice(0, 5).map(p => ({ id: p.id, name: p.procedure_name || p.name, market_size: p.market_size_usd_millions })));
        console.log('Sample aesthetic raw data (market_size_usd_millions):', aestheticResponse.data?.slice(0, 5).map(p => ({ id: p.id, name: p.procedure_name || p.name, market_size: p.market_size_usd_millions })));
        
        const dentalProcs = (dentalResponse.data || []).map(proc => ({
          ...proc,
          id: proc.id || Math.random(),
          name: proc.procedure_name || proc.name || proc.title || '',
          category: proc.category || proc.procedure_category || '',
          clinical_category: proc.clinical_category || proc.specialty || '',
          average_cost_usd: proc.average_cost_usd || proc.cost || proc.price || 0,
          yearly_growth_percentage: proc.yearly_growth_percentage || proc.growth_rate || 0,
          market_size_usd_millions: proc.market_size_usd_millions || 0
        }));
        
        const aestheticProcs = (aestheticResponse.data || []).map(proc => ({
          ...proc,
          id: proc.id || Math.random(),
          name: proc.procedure_name || proc.name || proc.title || '',
          category: proc.category || proc.procedure_category || '',
          average_cost_usd: proc.average_cost_usd || proc.cost || proc.cost_range || 0,
          yearly_growth_percentage: proc.yearly_growth_percentage || proc.trend_score || 0,
          downtime: proc.downtime || '',
          body_areas_applicable: proc.body_areas_applicable || proc.body_area || '',
          market_size_usd_millions: proc.market_size_usd_millions || 0
        }));
        
        console.log(`Loaded ${dentalProcs.length} dental procedures`);
        console.log('Sample mapped dentalProcs (market_size_usd_millions):', dentalProcs.slice(0, 5).map(p => ({ id: p.id, name: p.name, market_size: p.market_size_usd_millions })));
        console.log(`Loaded ${aestheticProcs.length} aesthetic procedures`);
        console.log('Sample mapped aestheticProcs (market_size_usd_millions):', aestheticProcs.slice(0, 5).map(p => ({ id: p.id, name: p.name, market_size: p.market_size_usd_millions })));
        
        setDentalProcedures(dentalProcs);
        setAestheticProcedures(aestheticProcs);
        
        // Fetch companies and categories
        await fetchCompanies();
        await fetchCategories();
      } catch (e: any) {
        console.error('Error fetching data:', e);
        setError(`Failed to load procedures: ${e.message}`);
      } finally {
        setLoading(false);
      }
    };
    
    fetchData();
  }, []);

  // Function to map procedure category to hierarchy ID
  const mapCategoryToHierarchy = (categoryName: string, industry: 'dental' | 'aesthetic'): number | null => {
    if (!categoryName) return null;
    
    const categoryMap = industry === 'dental' ? dentalCategoryMap : aestheticCategoryMap;
    return categoryMap[categoryName as keyof typeof categoryMap] || null;
  };

  // Pagination handlers for procedures
  const handleDentalChangePage = (_: unknown, newPage: number) => {
    setDentalPage(newPage);
  };

  const handleDentalChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
    setDentalRowsPerPage(parseInt(event.target.value, 10));
    setDentalPage(0);
  };

  const handleAestheticChangePage = (_: unknown, newPage: number) => {
    setAestheticPage(newPage);
  };

  const handleAestheticChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
    setAestheticRowsPerPage(parseInt(event.target.value, 10));
    setAestheticPage(0);
  };

  // Pagination handlers for companies
  const handleDentalCompanyChangePage = (_: unknown, newPage: number) => {
    setDentalCompanyPage(newPage);
  };

  const handleDentalCompanyChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
    setDentalCompanyRowsPerPage(parseInt(event.target.value, 10));
    setDentalCompanyPage(0);
  };

  const handleAestheticCompanyChangePage = (_: unknown, newPage: number) => {
    setAestheticCompanyPage(newPage);
  };

  const handleAestheticCompanyChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
    setAestheticCompanyRowsPerPage(parseInt(event.target.value, 10));
    setAestheticCompanyPage(0);
  };

  // Pagination handlers for categories
  const handleDentalCategoryChangePage = (_: unknown, newPage: number) => {
    setDentalCategoryPage(newPage);
  };

  const handleDentalCategoryChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
    setDentalCategoryRowsPerPage(parseInt(event.target.value, 10));
    setDentalCategoryPage(0);
  };

  const handleAestheticCategoryChangePage = (_: unknown, newPage: number) => {
    setAestheticCategoryPage(newPage);
  };

  const handleAestheticCategoryChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
    setAestheticCategoryRowsPerPage(parseInt(event.target.value, 10));
    setAestheticCategoryPage(0);
  };

  // Handle category selection
  const handleCategorySelect = (categoryId: number | null) => {
    setSelectedCategory(categoryId === selectedCategory ? null : categoryId);
    // Reset pagination when changing category filter
    if (selectedIndustry === 'dental') {
      setDentalPage(0);
    } else {
      setAestheticPage(0);
    }
  };

  // Safe rendering function for any field
  const safeRender = (value: any, isPercent = false, decimalPlaces = 1) => {
    if (value === null || value === undefined || value === '') return '-';
    if (isPercent) {
      const numValue = parseFloat(String(value));
      return isNaN(numValue) ? '-' : `${numValue.toFixed(decimalPlaces)}%`;
    }
    return String(value);
  };

  // Calculate category distributions for visualization
  const calculateCategoryDistribution = (procedures: any[], categories: any[]) => {
    // Create a map to count procedures by category
    const categoryMap = new Map<number, { count: number, name: string, marketSize: number }>();
    
    // Initialize with all categories
    categories.forEach(cat => {
      categoryMap.set(cat.id, { 
        count: 0, 
        name: cat.name, 
        marketSize: cat.market_size_usd_millions || 0 
      });
    });
    
    // Count procedures by category
    procedures.forEach(proc => {
      const catId = proc.category_id || proc.procedure_category_id;
      if (catId && categoryMap.has(catId)) {
        const current = categoryMap.get(catId)!;
        categoryMap.set(catId, { 
          ...current, 
          count: current.count + 1 
        });
      }
    });
    
    // Convert to array and sort by count (descending)
    return Array.from(categoryMap.values())
      .sort((a, b) => b.count - a.count)
      .map(item => ({
        ...item,
        marketSizeFormatted: item.marketSize ? `$${item.marketSize}M` : 'N/A'
      }));
  };

  // Get filtered procedures based on selected category - FIXED to use category name mapping
  const filteredDentalProcedures = useMemo(() => {
    if (!selectedCategory) return dentalProcedures;
    
    // Filter by mapping the category names to hierarchy IDs
    return dentalProcedures.filter(proc => {
      // First try to match by direct ID
      if (proc.category_id === selectedCategory || proc.procedure_category_id === selectedCategory) {
        return true;
      }
      
      // Then try to match by mapping the category name to hierarchy ID
      const mappedCategoryId = mapCategoryToHierarchy(proc.category, 'dental');
      return mappedCategoryId === selectedCategory;
    });
  }, [dentalProcedures, selectedCategory, dentalCategoryMap]);

  // Same for aesthetic procedures
  const filteredAestheticProcedures = useMemo(() => {
    if (!selectedCategory) return aestheticProcedures;
    
    return aestheticProcedures.filter(proc => {
}, [filteredDentalProcedures, dentalPage, dentalRowsPerPage, order, orderBy]);

const currentAestheticProcedures = useMemo(() => {
  const sortedData = stableSort(
    filteredAestheticProcedures, 
    getComparator(order, orderBy as keyof typeof filteredAestheticProcedures[0])
  );
  return sortedData.slice(
    aestheticPage * aestheticRowsPerPage,
    aestheticPage * aestheticRowsPerPage + aestheticRowsPerPage
  );
}, [filteredAestheticProcedures, aestheticPage, aestheticRowsPerPage, order, orderBy]);

// ... (rest of the code remains the same)

// Procedures section
<Card variant="outlined" sx={{ mb: 3 }}>
  // ... (rest of the code remains the same)

  <TableContainer component={Paper} variant="outlined">
    <Table size="small">
      <TableHead>
        <TableRow>
          <TableCell>
            <TableSortLabel
              active={orderBy === 'name'}
              direction={orderBy === 'name' ? order : 'asc'}
              onClick={() => handleRequestSort('name')}
            >
              Procedure Name
            </TableSortLabel>
          </TableCell>
          <TableCell>
            <TableSortLabel
              active={orderBy === 'category'}
              direction={orderBy === 'category' ? order : 'asc'}
              onClick={() => handleRequestSort('category')}
            >
              Category
            </TableSortLabel>
          </TableCell>
          <TableCell align="right">
            <TableSortLabel
              active={orderBy === 'average_cost_usd'}
              direction={orderBy === 'average_cost_usd' ? order : 'asc'}
              onClick={() => handleRequestSort('average_cost_usd')}
            >
              Avg. Cost
            </TableSortLabel>
          </TableCell>
          <TableCell align="right">
            <TableSortLabel
              active={orderBy === 'yearly_growth_percentage'}
              direction={orderBy === 'yearly_growth_percentage' ? order : 'asc'}
              onClick={() => handleRequestSort('yearly_growth_percentage')}
            >
              Growth %
            </TableSortLabel>
          </TableCell>
          <TableCell align="right">
            <TableSortLabel
              active={orderBy === 'market_size_usd_millions'}
              direction={orderBy === 'market_size_usd_millions' ? order : 'asc'}
              onClick={() => handleRequestSort('market_size_usd_millions')}
            >
              Market Size
            </TableSortLabel>
          </TableCell>
          {selectedIndustry === 'aesthetic' && (
            <TableCell>
              <TableSortLabel
                active={orderBy === 'downtime'}
                direction={orderBy === 'downtime' ? order : 'asc'}
                onClick={() => handleRequestSort('downtime')}
              >
                Downtime
              </TableSortLabel>
            </TableCell>
          )}
        </TableRow>
      </TableHead>
      <TableBody>
        {(selectedIndustry === 'dental' ? currentDentalProcedures : currentAestheticProcedures).map((proc) => (
          <TableRow 
            key={proc.id}
            onClick={() => handleProcedureClick(proc)}
            sx={{ 
              cursor: 'pointer', 
              '&:hover': { 
                bgcolor: 'action.hover' 
              } 
            }}
          >
            <TableCell>
              <Tooltip title={proc.description || 'No description available'}>
                <Typography variant="body2">{proc.name}</Typography>
              </Tooltip>
            </TableCell>
            <TableCell>{proc.category}</TableCell>
            <TableCell align="right">
              {typeof proc.average_cost_usd === 'number' 
                ? `$${proc.average_cost_usd.toLocaleString()}`
                : safeRender(proc.average_cost_usd)
              }
            </TableCell>
            <TableCell align="right">
              {safeRender(proc.yearly_growth_percentage, true)}
            </TableCell>
            <TableCell align="right">
              {formatMarketSize(proc.market_size_usd_millions)}
            </TableCell>
            {selectedIndustry === 'aesthetic' && (
              <TableCell>{(proc as any).downtime || '-'}</TableCell>
            )}
          </TableRow>
        ))}
        
        {(selectedIndustry === 'dental' ? !currentDentalProcedures.length : !currentAestheticProcedures.length) && (
          <TableRow>
            <TableCell colSpan={6} align="center" sx={{ py: 3 }}>
              <Typography variant="body2" color="text.secondary">
                No procedures found
                {selectedCategory ? ' for the selected category' : ''}
              </Typography>
            </TableCell>
          </TableRow>
        )}
      </TableBody>
    </Table>
  </TableContainer>
  
  <TablePagination
    rowsPerPageOptions={[5, 10, 25, 50]}
    component="div"
    count={selectedIndustry === 'dental' 
      ? filteredDentalProcedures.length 
      : filteredAestheticProcedures.length
    }
    rowsPerPage={selectedIndustry === 'dental' ? dentalRowsPerPage : aestheticRowsPerPage}
    page={selectedIndustry === 'dental' ? dentalPage : aestheticPage}
    onPageChange={selectedIndustry === 'dental' ? handleDentalChangePage : handleAestheticChangePage}
    onRowsPerPageChange={selectedIndustry === 'dental' 
      ? handleDentalChangeRowsPerPage 
      : handleAestheticChangeRowsPerPage
    }
  />
</CardContent>
</Card>

export default Dashboard;
